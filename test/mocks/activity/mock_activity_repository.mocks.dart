// Mocks generated by Mockito 5.4.6 from annotations
// in solutech_technical_assessment_app/test/mocks/activity/mock_activity_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:either_dart/either.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:solutech_technical_assessment_app/activities/models/activity.dart'
    as _i5;
import 'package:solutech_technical_assessment_app/activities/repository/activity_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ActivityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityRepository extends _i1.Mock
    implements _i2.ActivityRepository {
  MockActivityRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<String, List<_i5.Activity>>> getActivities() =>
      (super.noSuchMethod(
            Invocation.method(#getActivities, []),
            returnValue:
                _i3.Future<_i4.Either<String, List<_i5.Activity>>>.value(
                  _i6.dummyValue<_i4.Either<String, List<_i5.Activity>>>(
                    this,
                    Invocation.method(#getActivities, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<String, List<_i5.Activity>>>);

  @override
  _i3.Future<_i4.Either<String, _i5.Activity>> getActivityById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getActivityById, [id]),
            returnValue: _i3.Future<_i4.Either<String, _i5.Activity>>.value(
              _i6.dummyValue<_i4.Either<String, _i5.Activity>>(
                this,
                Invocation.method(#getActivityById, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i5.Activity>>);

  @override
  _i3.Future<_i4.Either<String, _i5.Activity>> postActivity(
    _i5.Activity? activity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#postActivity, [activity]),
            returnValue: _i3.Future<_i4.Either<String, _i5.Activity>>.value(
              _i6.dummyValue<_i4.Either<String, _i5.Activity>>(
                this,
                Invocation.method(#postActivity, [activity]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i5.Activity>>);

  @override
  _i3.Future<_i4.Either<String, _i5.Activity>> updateActivity(
    _i5.Activity? activity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateActivity, [activity]),
            returnValue: _i3.Future<_i4.Either<String, _i5.Activity>>.value(
              _i6.dummyValue<_i4.Either<String, _i5.Activity>>(
                this,
                Invocation.method(#updateActivity, [activity]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i5.Activity>>);

  @override
  _i3.Future<_i4.Either<String, String>> deleteActivity(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteActivity, [id]),
            returnValue: _i3.Future<_i4.Either<String, String>>.value(
              _i6.dummyValue<_i4.Either<String, String>>(
                this,
                Invocation.method(#deleteActivity, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, String>>);
}
